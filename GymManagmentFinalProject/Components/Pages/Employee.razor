@page "/employee"
@using GymManagmentFinalProject.Resources.Data
@inject EmployeesClass EmployeesService

<h3 class="text-center">Employee</h3>

<!-- Search Bar and Buttons side by side -->
<div class="d-flex justify-content-center mb-4">
    <input type="text" @bind="searchQuery" placeholder="Search by Employee ID, First Name, or Last Name" class="form-control w-50 me-2" />
    <button class="btn btn-primary w-25" @onclick="SearchEmployees">Search</button>
    <button class="btn btn-secondary w-25 ms-2" @onclick="ClearSearch">Clear</button>
</div>

@if (isNoResultsFound)
{
    <!-- No results message -->
    <div class="alert alert-warning text-center">
        No employees found matching your search criteria.
    </div>
}

@if (isTableVisible && employees != null && employees.Count > 0)
{
    <!-- Employee Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Employee Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Wage</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                    <th>Date Hired</th>
                    <th>Date Fired</th>
                    <th>Job Title</th>
                    <th>Password</th>
                    <th>Actions</th> <!-- Add this column for actions -->
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.EmployeeId</td>
                        <td>@employee.FirstName</td>
                        <td>@employee.LastName</td>
                        <td>@employee.Wage</td>
                        <td>@employee.Email</td>
                        <td>@employee.PhoneNumber</td>
                        <td>@employee.DateHired.ToShortDateString()</td>
                        <td>@(employee.DateFired.HasValue ? employee.DateFired.Value.ToShortDateString() : "N/A")</td>
                        <td>@employee.JobTitle</td>
                        <td>@employee.Password</td>
                        <td>
                            <!-- Delete Button -->
                            <button class="btn btn-danger" @onclick="() => ShowConfirmation(employee.EmployeeId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add Employee Button to Toggle Form Visibility -->
<button class="btn btn-primary w-100 mb-4" @onclick="ToggleFormVisibility">
    @if (isFormVisible)
    {
        <text>Hide</text>
    }
    else
    {
        <text>Add New Employee</text>
    }
</button>

<!-- Add Employee Form (Initially Hidden) -->
@if (isFormVisible)
{
    <h4 class="text-center mt-5">Add New Employee</h4>
    <div class="d-flex justify-content-center mb-4">
        <div class="form-group w-50">
            <!-- First Name -->
            <label for="firstName">First Name</label>
            <input id="firstName" type="text" @bind="newEmployee.FirstName" class="form-control mb-2" placeholder="Enter First Name" />

            <!-- Last Name -->
            <label for="lastName">Last Name</label>
            <input id="lastName" type="text" @bind="newEmployee.LastName" class="form-control mb-2" placeholder="Enter Last Name" />

            <!-- Wage -->
            <label for="wage">Wage</label>
            <input id="wage" type="text" @bind="newEmployee.Wage" class="form-control mb-2" placeholder="Enter Wage" />

            <!-- Email -->
            <label for="email">Email</label>
            <input id="email" type="email" @bind="newEmployee.Email" class="form-control mb-2" placeholder="Enter Email" />

            <!-- Phone Number -->
            <label for="phoneNumber">Phone Number</label>
            <input id="phoneNumber" type="text" @bind="newEmployee.PhoneNumber" class="form-control mb-2" placeholder="Enter Phone Number" />

            <!-- Date Hired -->
            <label for="dateHired">Date Hired</label>
            <input id="dateHired" type="date" @bind="newEmployee.DateHired" class="form-control mb-2" />

            <!-- Job Title -->
            <label for="jobTitle">Job Title</label>
            <input id="jobTitle" type="text" @bind="newEmployee.JobTitle" class="form-control mb-2" placeholder="Enter Job Title" />

            <!-- Password -->
            <label for="password">Password</label>
            <input id="password" type="password" @bind="newEmployee.Password" class="form-control mb-2" placeholder="Enter Password" />

            <!-- Add Employee Button -->
            <button class="btn btn-success w-100" @onclick="AddEmployee">Add Employee</button>
        </div>
    </div>
}

<!-- Confirmation Dialog -->
@if (isConfirmDeleteVisible)
{
    <div class="alert alert-warning">
        <p>Are you sure you want to delete this employee?</p>
        <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
    </div>
}

@code {
    private List<Employees> employees;
    private string searchQuery;
    private Employees newEmployee = new Employees(); // Object to hold new employee data
    private bool isFormVisible = false; // Toggle form visibility
    private bool isTableVisible = false; // Toggle table visibility
    private bool isConfirmDeleteVisible = false; // Flag to control confirmation visibility
    private bool isNoResultsFound = false; // Flag to show "No results found" message
    private int employeeIdToDelete = 0; // Store the employee ID to delete

    // Set Date Hired to current date by default when the form is initialized
    protected override void OnInitialized()
    {
        newEmployee.DateHired = DateTime.Today;
    }

    private async Task SearchEmployees()
    {
        // Perform the search using the injected service
        employees = await EmployeesService.SearchEmployeesAsync(searchQuery);
        isTableVisible = employees != null && employees.Count > 0; // Show table if results exist
        isNoResultsFound = !isTableVisible; // If no results, show the "No results found" message
    }

    private void ClearSearch()
    {
        // Clear the search query and hide the employee table
        searchQuery = string.Empty;
        employees = null;
        isTableVisible = false; // Hide the table
        isNoResultsFound = false; // Hide the "No results found" message
    }

    private async Task AddEmployee()
    {
        // Remove DateFired before adding to database (sets to null)
        newEmployee.DateFired = null;

        // Add the new employee to the database
        await EmployeesService.AddEmployeeAsync(newEmployee);

        // Clear the form and hide the table
        newEmployee = new Employees();
        isTableVisible = false; // Keep the table hidden
    }

    // Toggle the visibility of the Add Employee form
    private void ToggleFormVisibility()
    {
        isFormVisible = !isFormVisible;
    }

    private void ShowConfirmation(int employeeId)
    {
        // Show confirmation prompt
        employeeIdToDelete = employeeId;
        isConfirmDeleteVisible = true;
    }

    private async Task ConfirmDelete()
    {
        // Perform the deletion
        await EmployeesService.DeleteEmployeeAsync(employeeIdToDelete);

        // Remove the deleted employee from the list without refreshing the whole table
        employees = employees.Where(e => e.EmployeeId != employeeIdToDelete).ToList();

        // Hide the confirmation dialog
        isConfirmDeleteVisible = false;
    }

    private void CancelDelete()
    {
        // Hide the confirmation dialog without deleting
        isConfirmDeleteVisible = false;
    }
}

<style>
    .d-flex {
        display: flex;
        align-items: center;
    }

    .search-container {
        margin-top: 20px;
    }

    .employee-details {
        max-width: 600px;
        margin: 0 auto;
    }

    .card-title {
        text-align: center;
    }

    .btn {
        margin-top: 10px;
    }

    .text-center {
        text-align: center;
    }

    .form-control {
        margin-top: 10px;
    }

    /* Optional: Center table inside the container */
    .table-responsive {
        margin-top: 20px;
        overflow-x: auto;
    }

    /* Adjust the form styling for adding new employee */
    .form-group {
        max-width: 500px;
        margin: 0 auto;
    }

    /* Styling for labels */
    label {
        font-weight: bold;
        display: block;
        margin-top: 10px;
    }
</style>
